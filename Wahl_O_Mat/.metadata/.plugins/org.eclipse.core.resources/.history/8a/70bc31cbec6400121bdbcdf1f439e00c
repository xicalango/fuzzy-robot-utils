package persistence;

import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import java.util.Vector;

import domain.DCandidate;
import domain.District;
import domain.FederalState;
import domain.Party;
import domain.PartyList;
import java.sql.*;

public class DataHandler implements IDataHandler {

	
	private Connection connection;
	
	public DataHandler() throws ClassNotFoundException, SQLException{		
		Class.forName("org.postgresql.Driver");
		this.connection = DriverManager.getConnection("jdbc:postgresql://minitux.dyndns.org:5432/btw2009", "btw2009", "btw2009");		
		
	}
	
	@Override
	public List<District> getDistricts() throws SQLException {
		Statement statement = this.connection.createStatement();
		ResultSet rs = statement.executeQuery("Select * from Wahlkreis");
		Vector<District> districts = new Vector<District>();
		
		while(rs.next()){
			
		}
	}

	@Override
	public List<DCandidate> getDCandidates(District district) throws SQLException {
		PreparedStatement getDCandByDistrict = this.connection.prepareStatement("Select * from Direktkandidat WHERE wahlkreis_id = ?" );
		getDCandByDistrict.setInt(1, district.getID());
		ResultSet rs = getDCandByDistrict.executeQuery();
		List<DCandidate> candidateList = new ArrayList<DCandidate>();
		while(rs.next()){
			int id = rs.getInt("id");
			String firstName = rs.getString("vorname");
			String lastName = rs.getString("nachname");
			int partyID = rs.getInt("partei_id");
			
			candidateList.add(new DCandidate(id, firstName, lastName, district, this.getPartyByID(partyID)));
		}
		return candidateList;
	}
	
	
	private Party getPartyByID(int ID) throws SQLException{		
		PreparedStatement getPartyByIDStatement = this.connection.prepareStatement("Select * from Partei WHERE id = ?" );
		getPartyByIDStatement.setInt(1, ID);
		ResultSet rs = getPartyByIDStatement.executeQuery();
		
		int party_id = rs.getInt("id");
		String party_name = rs.getString("name");
		return new Party(party_id, party_name);
	}
	
	private getStateByID(int ID) throws SQLException{
		PreparedStatement getStateByIDStatement = this.connection.prepareStatement("Select * from Land WHERE id = ?" );
		getStateByIDStatement.setInt(1, ID);
		ResultSet rs = getStateByIDStatement.executeQuery();
		
		int party_id = rs.getInt("id");
		String party_name = rs.getString("name");
		return new Party(party_id, party_name);
	}
	
	
	/*
	private District getDistrictByDCandidateID(int dCandidateID) throws SQLException{
		PreparedStatement getDCandByDistrict = this.connection.prepareStatement("Select w.id, w.name, w.land_id, w.wahlberechtigte from Wahlkreis, Direktkandidat WHERE w.id = d.wahlkreis_id AND d.id = " );
		getDCandByDistrict.setInt(1, dCandidateID);
		ResultSet rs = getDCandByDistrict.executeQuery();

		int land_id = rs.getInt("land_id");
		int wahlkreis_id = rs.getInt("id");
		String wahlkreis_name = rs.getString("name");		
		int wahlberechtigte = rs.getInt("wahlberechtigte");
		
		PreparedStatement getFederalStateById = this.connection.prepareStatement("Select l.id, l.name, l.jahr from Land where l.id = " );
		getFederalStateById.setInt(1, land_id);
		ResultSet federalState = getFederalStateById.executeQuery();
				
		String land_name = federalState.getString("name");
		int land_jahr = federalState.getInt("jahr");		
		
		FederalState state = new FederalState(land_id, land_name, land_jahr);
		District result = new District(wahlkreis_id, wahlkreis_name, state, wahlberechtigte);
		return result;
	}
	*/

	@Override
	public List<PartyList> getPartys(District district) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public boolean access(UUID uuid) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean vote(UUID uuid, PartyList party, DCandidate dCandidate,
			District district) {
		// TODO Auto-generated method stub
		return false;
	}

}
